package cmd

import (
	"bytes"
	"fmt"
	"github.com/iancoleman/strcase"
	"github.com/lagren/sshconfgen/model"
	"github.com/spf13/cobra"
	"gopkg.in/yaml.v2"
	"os"
	tmpl "text/template"
)

var inventoryFile string
var templateFiles []string

var generateCmd = &cobra.Command{
	Use: "generate",
	Run: func(cmd *cobra.Command, args []string) {
		inventory := readInventory()
		templates := readTemplate()

		fmt.Println("# File generated by sshconfgen; DO NOT EDIT.")
		fmt.Println()

		for _, template := range templates {
			cfgTemplates := make(map[string]*tmpl.Template)

			for key, valueTemplate := range template.Config {
				t, err := tmpl.New(key).Option("missingkey=zero").Parse(valueTemplate)
				if err != nil {
					panic(err)
				}

				cfgTemplates[key] = t
			}

			fmt.Println("#", template.Name)
			fmt.Println()

			for _, item := range inventory.Inventory {
				context := item.AsMap()

				var hit = false

				for _, filter := range template.Filters {
					var filterHit = true

					for key, value := range filter {
						itemValue := context[key]

						if itemValue != value {
							filterHit = false
						}
					}

					if filterHit {
						hit = true
					}
				}

				if !hit && len(template.Filters) > 0 {
					continue
				}

				t, _ := cfgTemplates["host"]
				val := executeTemplate(t, context)

				fmt.Printf("Host %s\n", val)

				for key, t := range cfgTemplates {
					if key == "host" {
						continue
					}

					val := executeTemplate(t, context)

					if val == "" {
						continue
					}

					fmt.Printf("\t%s %s\n", strcase.ToCamel(key), val)
				}

				fmt.Println()
			}
		}

	},
}

func executeTemplate(t *tmpl.Template, context map[string]string) string {
	var b bytes.Buffer
	if err := t.Execute(&b, context); err != nil {
		panic(err)
	}

	return b.String()
}

func readInventory() *model.Configuration {
	f, err := os.Open(inventoryFile)
	if err != nil {
		panic(err)
	}
	defer f.Close()

	d := yaml.NewDecoder(f)

	var config model.Configuration
	err = d.Decode(&config)
	if err != nil {
		panic(err)
	}

	return &config
}

func readTemplate() []*model.Template {
	var templates []*model.Template

	for _, templateFile := range templateFiles {
		f, err := os.Open(templateFile)
		if err != nil {
			panic(err)
		}

		d := yaml.NewDecoder(f)

		var config model.Template
		err = d.Decode(&config)
		if err != nil {
			panic(err)
		}

		templates = append(templates, &config)

		f.Close()
	}

	return templates
}

func init() {
	generateCmd.Flags().StringVarP(&inventoryFile, "inventory", "i", "", "")
	generateCmd.Flags().StringArrayVarP(&templateFiles, "template", "t", []string{}, "")
	generateCmd.MarkFlagRequired("inventory")
	generateCmd.MarkFlagRequired("template")

	rootCmd.AddCommand(generateCmd)
}
